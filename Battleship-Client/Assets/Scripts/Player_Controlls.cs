//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Player_Controlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Controlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Controlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Controlls"",
    ""maps"": [
        {
            ""name"": ""Gamepad"",
            ""id"": ""b167eec3-fc37-4fc1-9b57-fa2d9c356336"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""d82bf5a6-2357-4df2-9ccf-305536dced61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""66d09616-0909-449b-8847-b5c0236704da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c3a5ffa3-654f-4239-9792-0929110c93ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""51dd84dc-1742-4f85-acb2-6bf6b3c8554d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""9e2b1bec-7223-4fe9-aa7b-110863201f72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""a238b2bc-5d0f-4aba-acc9-0e762308ca35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f1dfa24-34c5-4e5c-9ebf-7a346f5b62b2"",
                    ""path"": ""<HID::Jess Tech Dual Analog Pad>/button9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f154dda3-09a7-43b5-a54c-94dbd285e5d6"",
                    ""path"": ""<HID::Jess Tech Dual Analog Pad>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1712f20a-1a2c-4731-8d5d-1743f7f75536"",
                    ""path"": ""<HID::Jess Tech Dual Analog Pad>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e988282-bb19-4a62-96ff-e1d1022f4cc0"",
                    ""path"": ""<HID::Jess Tech Dual Analog Pad>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a90b9217-67ff-4a82-ac1a-1409bd4ce51c"",
                    ""path"": ""<HID::Jess Tech Dual Analog Pad>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18ddeaee-74dd-4ece-8126-eb0cf984095d"",
                    ""path"": ""<HID::Jess Tech Dual Analog Pad>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gamepad
        m_Gamepad = asset.FindActionMap("Gamepad", throwIfNotFound: true);
        m_Gamepad_Back = m_Gamepad.FindAction("Back", throwIfNotFound: true);
        m_Gamepad_MoveDown = m_Gamepad.FindAction("MoveDown", throwIfNotFound: true);
        m_Gamepad_MoveLeft = m_Gamepad.FindAction("MoveLeft", throwIfNotFound: true);
        m_Gamepad_MoveUp = m_Gamepad.FindAction("MoveUp", throwIfNotFound: true);
        m_Gamepad_MoveRight = m_Gamepad.FindAction("MoveRight", throwIfNotFound: true);
        m_Gamepad_Select = m_Gamepad.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gamepad
    private readonly InputActionMap m_Gamepad;
    private IGamepadActions m_GamepadActionsCallbackInterface;
    private readonly InputAction m_Gamepad_Back;
    private readonly InputAction m_Gamepad_MoveDown;
    private readonly InputAction m_Gamepad_MoveLeft;
    private readonly InputAction m_Gamepad_MoveUp;
    private readonly InputAction m_Gamepad_MoveRight;
    private readonly InputAction m_Gamepad_Select;
    public struct GamepadActions
    {
        private @Player_Controlls m_Wrapper;
        public GamepadActions(@Player_Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Back => m_Wrapper.m_Gamepad_Back;
        public InputAction @MoveDown => m_Wrapper.m_Gamepad_MoveDown;
        public InputAction @MoveLeft => m_Wrapper.m_Gamepad_MoveLeft;
        public InputAction @MoveUp => m_Wrapper.m_Gamepad_MoveUp;
        public InputAction @MoveRight => m_Wrapper.m_Gamepad_MoveRight;
        public InputAction @Select => m_Wrapper.m_Gamepad_Select;
        public InputActionMap Get() { return m_Wrapper.m_Gamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamepadActions set) { return set.Get(); }
        public void SetCallbacks(IGamepadActions instance)
        {
            if (m_Wrapper.m_GamepadActionsCallbackInterface != null)
            {
                @Back.started -= m_Wrapper.m_GamepadActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_GamepadActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_GamepadActionsCallbackInterface.OnBack;
                @MoveDown.started -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveDown;
                @MoveDown.performed -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveDown;
                @MoveDown.canceled -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveDown;
                @MoveLeft.started -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.performed -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.canceled -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveLeft;
                @MoveUp.started -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveUp;
                @MoveUp.performed -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveUp;
                @MoveUp.canceled -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveUp;
                @MoveRight.started -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveRight;
                @MoveRight.performed -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveRight;
                @MoveRight.canceled -= m_Wrapper.m_GamepadActionsCallbackInterface.OnMoveRight;
                @Select.started -= m_Wrapper.m_GamepadActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_GamepadActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_GamepadActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_GamepadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public GamepadActions @Gamepad => new GamepadActions(this);
    public interface IGamepadActions
    {
        void OnBack(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
}
